{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 화면 설명 : 회원정보 수정 /삭제 화면\nimport CustomerDataService from \"@/services/CustomerDataService\";\nexport default {\n  name: \"edit-customer\",\n  data: function data() {\n    return {\n      // 객체 ( 회원정보 )\n      currentCustomer: null,\n      message: ''\n    };\n  },\n  methods: {\n    // id에 해당하는 회원정보를 조회하는 서비스를 요청(springboot)\n    getCustomer: function getCustomer(id) {\n      var _this = this;\n\n      // axios 통신이용 서비스 호출( springboot )\n      CustomerDataService.get(id) // 성공하면 then으로 결과 데이터가 들어옴( response.data )\n      .then(function (response) {\n        _this.currentCustomer = response.data;\n      }) //  실패하면 catch로 에러 데이터가 들어옴\n      .catch(function (e) {\n        alert(e);\n      });\n    },\n    //  회원정보 수정 서비스 요청( springboot )\n    updateCustomer: function updateCustomer() {\n      var _this2 = this;\n\n      //  axios 통신으로 수정 서비스 요청( springboot )\n      CustomerDataService.update(this.currentCustomer.id, this.currentCustomer) //  성공하면 then 으로 결과 데이터가 들어옴\n      .then(function () {\n        _this2.message = 'The customer was updated successfully!';\n      }) //  실패하면 catch 로 에러 데이터가 들어옴\n      .catch(function (e) {\n        alert(e);\n      });\n    },\n    //  회원삭제 서비스 요청(springboot)\n    deleteCustomer: function deleteCustomer() {\n      var _this3 = this;\n\n      //  axios 이용해서 회원 삭제 요청( springboot )\n      CustomerDataService.delete(this.currentCustomer.id) //  성공하면 then으로 결과 데이터가 들어옴\n      .then(function () {\n        // router/index.js 안에 name\n        // 화면 이동 : customers 화면으로 이동됨\n        _this3.$router.push({\n          name: 'customers'\n        });\n      }) //  실패하면 catch로 에러 데이터가 들어옴\n      .catch(function (e) {\n        alert(e); //  console.log(e)\n      });\n    }\n  },\n  //  화면이 뜨면 실행되는 이벤트\n  //  http://localhost:8080/:id\n  //  $route : router/index.js , params.id\n  mounted: function mounted() {\n    this.getCustomer(this.$route.params.id);\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;AAEA;EACAA,qBADA;EAEAC,IAFA,kBAEA;IACA;MACA;MACAC,qBAFA;MAGAC;IAHA;EAKA,CARA;EASAC;IACA;IACAC,WAFA,uBAEAC,EAFA,EAEA;MAAA;;MACA;MACAC,4BACA;MADA,CAEAC,IAFA,CAEA;QACA;MACA,CAJA,EAKA;MALA,CAMAC,KANA,CAMA;QACAC;MACA,CARA;IASA,CAbA;IAcA;IACAC,cAfA,4BAeA;MAAA;;MACA;MACAJ,oBACAK,MADA,CACA,uBADA,EACA,oBADA,EAEA;MAFA,CAGAJ,IAHA,CAGA;QACA;MACA,CALA,EAMA;MANA,CAOAC,KAPA,CAOA;QACAC;MACA,CATA;IAUA,CA3BA;IA4BA;IACAG,cA7BA,4BA6BA;MAAA;;MACA;MACAN,oDACA;MADA,CAEAC,IAFA,CAEA;QACA;QACA;QACA;UAAAR;QAAA;MACA,CANA,EAOA;MAPA,CAQAS,KARA,CAQA;QACAC,SADA,CAEA;MACA,CAXA;IAYA;EA3CA,CATA;EAsDA;EACA;EACA;EACAI,OAzDA,qBAyDA;IACA;EACA;AA3DA","names":["name","data","currentCustomer","message","methods","getCustomer","id","CustomerDataService","then","catch","alert","updateCustomer","update","deleteCustomer","mounted"],"sourceRoot":"src/components/customer","sources":["EditCustomer.vue"],"sourcesContent":["<template>\r\n  <!--    기존 회원이 있을 경우 currentCustomer != null -->\r\n  <div class=\"container mt-3\" v-if=\"currentCustomer\">\r\n<!--    mb-3 : m(margin), p(padding) : l(left), r(right), b(bottom) , 1 : 25px, 2 50px -->\r\n    <div class=\"mb-3\">\r\n      <label for=\"firstName\" class=\"form-label\">First Name</label>\r\n      <input type=\"text\" class=\"form-control\" id=\"firstName\"\r\n             required name=\"firstName\" v-model=\"currentCustomer.firstName\">\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <label for=\"lastName\" class=\"form-label\">Last Name</label>\r\n      <input type=\"text\" class=\"form-control\" id=\"lastName\"\r\n             required name=\"lastName\" v-model=\"currentCustomer.lastName\">\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <label for=\"email\" class=\"form-label\">Email</label>\r\n      <input type=\"email\" class=\"form-control\" id=\"email\"\r\n             required name=\"email\" v-model=\"currentCustomer.email\">\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <label for=\"phone\" class=\"form-label\">Phone</label>\r\n      <input type=\"text\" class=\"form-control\" id=\"phone\"\r\n             required name=\"phone\" v-model=\"currentCustomer.phone\">\r\n    </div>\r\n    <div class=\"mb-3\">\r\n      <button @click=\"updateCustomer\"\r\n              class=\"btn btn-primary me-3\">Update</button>\r\n      <button @click=\"deleteCustomer\"\r\n              class=\"btn btn-danger\">Delete</button>\r\n    </div>\r\n<!--    수정버튼을 클릭후 성공했을때 아래가 보임 -->\r\n    <div class=\"alert alert-success\"\r\n         role=\"alert\"\r\n         v-if=\"message\"\r\n    >\r\n      {{ message }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 화면 설명 : 회원정보 수정 /삭제 화면\r\nimport CustomerDataService from \"@/services/CustomerDataService\";\r\n\r\nexport default {\r\n  name: \"edit-customer\",\r\n  data() {\r\n    return {\r\n      // 객체 ( 회원정보 )\r\n      currentCustomer: null,\r\n      message: ''\r\n    }\r\n  },\r\n  methods: {\r\n    // id에 해당하는 회원정보를 조회하는 서비스를 요청(springboot)\r\n    getCustomer(id) {\r\n      // axios 통신이용 서비스 호출( springboot )\r\n      CustomerDataService.get(id)\r\n      // 성공하면 then으로 결과 데이터가 들어옴( response.data )\r\n          .then(response => {\r\n            this.currentCustomer = response.data;\r\n          })\r\n    //  실패하면 catch로 에러 데이터가 들어옴\r\n          .catch(e => {\r\n            alert(e);\r\n          })\r\n    },\r\n  //  회원정보 수정 서비스 요청( springboot )\r\n    updateCustomer() {\r\n    //  axios 통신으로 수정 서비스 요청( springboot )\r\n      CustomerDataService\r\n          .update(this.currentCustomer.id, this.currentCustomer )\r\n    //  성공하면 then 으로 결과 데이터가 들어옴\r\n          .then(() => {\r\n            this.message = 'The customer was updated successfully!';\r\n          })\r\n    //  실패하면 catch 로 에러 데이터가 들어옴\r\n          .catch(e => {\r\n            alert(e);\r\n          })\r\n    },\r\n  //  회원삭제 서비스 요청(springboot)\r\n    deleteCustomer() {\r\n    //  axios 이용해서 회원 삭제 요청( springboot )\r\n      CustomerDataService.delete(this.currentCustomer.id)\r\n    //  성공하면 then으로 결과 데이터가 들어옴\r\n          .then(() => {\r\n            // router/index.js 안에 name\r\n            // 화면 이동 : customers 화면으로 이동됨\r\n            this.$router.push({ name: 'customers'});\r\n          })\r\n    //  실패하면 catch로 에러 데이터가 들어옴\r\n          .catch(e => {\r\n            alert(e);\r\n          //  console.log(e)\r\n          })\r\n    }\r\n  },\r\n//  화면이 뜨면 실행되는 이벤트\r\n//  http://localhost:8080/:id\r\n//  $route : router/index.js , params.id\r\n  mounted() {\r\n    this.getCustomer(this.$route.params.id);\r\n  }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}