{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport User from '@/models/user';\n/* eslint-disable */\n\nexport default {\n  name: \"Login\",\n  // 뷰의 변수들을 초기화하는 곳 : data()\n  data: function data() {\n    return {\n      user: new User(\"\", \"\"),\n      loading: false,\n      message: \"\"\n    };\n  },\n  computed: {\n    // 값 : false, true\n    loggedIn: function loggedIn() {\n      // 아래 내용은 공유저장소(store/index.js) 전역변수\n      return this.$store.state.auth.status.loggedIn;\n    }\n  },\n  // 화면이 뜨자마자 실행되는 이벤트\n  // created(Vue객체가 최초 만들어질때 실행됨), mounted(화면 모두 뜰때 실행됨)\n  created: function created() {\n    // 로그인이 되었으면 loggedIn = true\n    // 로그인이 안되었으면 loggedIn = false\n    // 로그인이 되었으면 사용자를 프로필 페이지로 안내\n    if (this.loggedIn) {\n      //  profile 페이지로 강제 이동함\n      this.$router.push(\"/profile\");\n    }\n  },\n  methods: {\n    //  로그인 메소드 정의\n    handleLogin: function handleLogin() {\n      var _this = this;\n\n      this.loading = true; //  Vee-Validation npm 설치 : 뷰에서 유효성 체크 모듈\n      //  validateAll => v-validate 체크해서 모두 true, false 인지 확인\n      //  값이 isValid = true ( false )\n\n      this.$validator.validateAll().then(function (isValid) {\n        //  유효성 체크가 걸린 입력박스가 하나라도 에러가 나면 : false\n        //  isValid = false 이면 로그인 함수 종료\n        if (!isValid) {\n          _this.loading = false;\n          return;\n        } //  로그인 절차 진행\n        //  springboot 서버와 통신\n\n\n        if (_this.user.username && _this.user.password) {\n          //  springboot로 username, password 전송해서 로그인 진행\n          //  공유저장소의 비동기 메소드 호출 ( login )\n          _this.$store.dispatch(\"auth/login\", _this.user) //  결과가 성공하면 then(첫번째매개변수)\n          //  실패하면 then(두번째매개변수)\n          .then( // 성공\n          function () {\n            // 로그인 성공시 자동 페이지 전환 : /profile 페이지\n            _this.$router.push(\"/profile\");\n          }, // 실패\n          function (error) {\n            _this.loading = false;\n            _this.message = error.message || error.toString();\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AAEA;;AACA;EACAA,aADA;EAEA;EACAC,IAHA,kBAGA;IACA;MACAC,sBADA;MAEAC,cAFA;MAGAC;IAHA;EAKA,CATA;EAUAC;IACA;IACAC,QAFA,sBAEA;MACA;MACA;IACA;EALA,CAVA;EAiBA;EACA;EACAC,OAnBA,qBAmBA;IACA;IACA;IACA;IACA;MACA;MACA;IACA;EACA,CA3BA;EA4BAC;IACA;IACAC,WAFA,yBAEA;MAAA;;MACA,oBADA,CAEA;MACA;MACA;;MACA,8BACAC,IADA,CACA;QACA;QACA;QACA;UACA;UACA;QACA,CANA,CAQA;QACA;;;QACA;UACA;UACA;UACA,gDACA;UACA;UAFA,CAGAA,IAHA,EAIA;UACA;YACA;YACA;UACA,CARA,EASA;UACA;YACA;YACA,gBACAC,iCADA;UAEA,CAdA;QAgBA;MACA,CA/BA;IAiCA;EAxCA;AA5BA","names":["name","data","user","loading","message","computed","loggedIn","created","methods","handleLogin","then","error"],"sourceRoot":"src/views","sources":["Login.vue"],"sourcesContent":["<template>\r\n  <!--  부트스트랩 화면배치 : col 12등분 -->\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card card-container\">\r\n      <img id=\"profile-img\" src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\" class=\"profile-img-card\" />\r\n      <form name=\"form\" @submit.prevent=\"handleLogin\">\r\n        <!--        입력양식들 : 유효성 체크 (Vee-Validation) -->\r\n        <div class=\"form-group\">\r\n          <label for=\"username\">Username</label>\r\n          <input v-model=\"user.username\" v-validate=\"'required'\" type=\"text\" class=\"form-control\" name=\"username\">\r\n          <!--   에러가 발생하면 error.has('username') 값이 true됨      -->\r\n          <!--   에러가 발생안하면 error.has('username') 값이 false됨      -->\r\n          <div v-if=\"errors.has('username')\" class=\"alert alert-danger\" role=\"alert\">\r\n            Username is required!(필수)\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">Password</label>\r\n          <input v-model=\"user.password\" v-validate=\"'required'\" type=\"password\" class=\"form-control\" name=\"password\">\r\n          <!--   에러가 발생하면 error.has('password') 값이 true됨      -->\r\n          <!--   에러가 발생안하면 error.has('password') 값이 false됨      -->\r\n          <div v-if=\"errors.has('password')\" class=\"alert alert-danger\" role=\"alert\">\r\n            Password is required!(필수)\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <button class=\"btn btn-primary btn-block\" :disabled=\"loading\">\r\n            <span v-show=\"loading\" class=\"spinner-border spinner-border-sm\"></span>\r\n            <span>Login</span>\r\n          </button>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <div v-if=\"message\" class=\"alert alert-danger\" role=\"alert\">\r\n            {{ message }}\r\n          </div>\r\n        </div>\r\n\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport User from '@/models/user'\r\n\r\n/* eslint-disable */\r\nexport default {\r\n  name: \"Login\",\r\n  // 뷰의 변수들을 초기화하는 곳 : data()\r\n  data() {\r\n    return {\r\n      user: new User(\"\", \"\"),\r\n      loading: false,\r\n      message: \"\"\r\n    }\r\n  },\r\n  computed: {\r\n    // 값 : false, true\r\n    loggedIn() {\r\n      // 아래 내용은 공유저장소(store/index.js) 전역변수\r\n      return this.$store.state.auth.status.loggedIn;\r\n    }\r\n  },\r\n  // 화면이 뜨자마자 실행되는 이벤트\r\n  // created(Vue객체가 최초 만들어질때 실행됨), mounted(화면 모두 뜰때 실행됨)\r\n  created() {\r\n    // 로그인이 되었으면 loggedIn = true\r\n    // 로그인이 안되었으면 loggedIn = false\r\n    // 로그인이 되었으면 사용자를 프로필 페이지로 안내\r\n    if (this.loggedIn) {\r\n      //  profile 페이지로 강제 이동함\r\n      this.$router.push(\"/profile\");\r\n    }\r\n  },\r\n  methods: {\r\n    //  로그인 메소드 정의\r\n    handleLogin() {\r\n      this.loading = true;\r\n      //  Vee-Validation npm 설치 : 뷰에서 유효성 체크 모듈\r\n      //  validateAll => v-validate 체크해서 모두 true, false 인지 확인\r\n      //  값이 isValid = true ( false )\r\n      this.$validator.validateAll()\r\n        .then(isValid => {\r\n          //  유효성 체크가 걸린 입력박스가 하나라도 에러가 나면 : false\r\n          //  isValid = false 이면 로그인 함수 종료\r\n          if (!isValid) {\r\n            this.loading = false;\r\n            return;\r\n          }\r\n\r\n          //  로그인 절차 진행\r\n          //  springboot 서버와 통신\r\n          if (this.user.username && this.user.password) {\r\n            //  springboot로 username, password 전송해서 로그인 진행\r\n            //  공유저장소의 비동기 메소드 호출 ( login )\r\n            this.$store.dispatch(\"auth/login\", this.user)\r\n              //  결과가 성공하면 then(첫번째매개변수)\r\n              //  실패하면 then(두번째매개변수)\r\n              .then(\r\n                // 성공\r\n                () => {\r\n                  // 로그인 성공시 자동 페이지 전환 : /profile 페이지\r\n                  this.$router.push(\"/profile\");\r\n                },\r\n                // 실패\r\n                error => {\r\n                  this.loading = false;\r\n                  this.message =\r\n                    (error.message || error.toString())\r\n                }\r\n              )\r\n          }\r\n        });\r\n\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* scoped 예약어가 허용되지 않음 : @import \"styles.css\" */\r\n/* scoped 아래처럼 css 파일형태가 아니고, 문법이 나와야 허용됨 */\r\n/* 굳이 파일로 하고싶으면 : xx.scss @import 해야함 */\r\nlabel {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.card-container.card {\r\n  max-width: 350px !important;\r\n  padding: 40px 40px;\r\n}\r\n\r\n.card {\r\n  background-color: #f7f7f7;\r\n  padding: 20px 25px 30px;\r\n  margin: 0 auto 25px;\r\n  margin-top: 50px;\r\n  -moz-border-radius: 2px;\r\n  -webkit-border-radius: 2px;\r\n  border-radius: 2px;\r\n  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.profile-img-card {\r\n  width: 96px;\r\n  height: 96px;\r\n  margin: 0 auto 10px;\r\n  display: block;\r\n  -moz-border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  border-radius: 50%;\r\n}\r\n</style>\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}