{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport UploadService from \"../services/UploadFilesService\";\nexport default {\n  name: \"upload-image\",\n  data: function data() {\n    // 변수 초기화\n    return {\n      currentImage: undefined,\n      // 현재이미지\n      previewImage: undefined,\n      // 미리보기 이미지\n      progress: 0,\n      // 프로그래스바를 위한 변수\n      message: \"\",\n      imageInfo: [] // 이미지 정보 객체배열\n\n    };\n  },\n  methods: {\n    // 이미지를 선택하면 변수에 저장하는 메소드\n    selectImage: function selectImage() {\n      // 파일선택상자에서 첫번째로 선택한 이미지가 저장됨\n      this.currentImage = this.$refs.file.files.item(0); // 아래는 미리보기 이미지를 위한 주소가 저장됨\n\n      this.previewImage = URL.createObjectURL(this.currentImage);\n      this.progress = 0;\n      this.message = \"\";\n    },\n    // 파일 업로드를 위한 메소드\n    upload: function upload() {\n      var _this = this;\n\n      this.progress = 0; // 서버에 이미지 업로드 요청(insert 문 실행)\n\n      UploadService.upload(this.currentImage, function (event) {\n        // 파일이 업로드될때 진척상황이 저장됨(%)\n        _this.progress = Math.round(100 * event.loaded / event.total);\n      }) // 성공하면 then 으로 들어옴(서버에서 응답한 객체)\n      .then(function (response) {\n        // 서버쪽 응답 메시지 저장\n        _this.message = response.data.message; // 서버쪽에 insert가 잘되었는지\n        // select문 호출\n\n        return UploadService.getFiles();\n      }) // 성공하면 then으로 들어옴(서버쪽 객체 받음)\n      .then(function (image) {\n        _this.imageInfo = image.data;\n      }) // 실패하면 catch으로 들어옴\n      // 화면에 실패메세지 출력\n      .catch(function (err) {\n        _this.progress = 0;\n        _this.message = \"Could not upload the image!\" + err;\n        _this.currentImage = undefined;\n      });\n    }\n  },\n  // 화면이 뜨자마자 실행되는 이벤트\n  mounted: function mounted() {\n    var _this2 = this;\n\n    // springboot 서버에 이미지파일 요청\n    UploadService.getFiles() // 성공하면 then에 들어옴(객체, 응답메세지)\n    .then(function (response) {\n      // response.data : 서버쪽에서 전송된 객체\n      _this2.imageInfo = response.data;\n    });\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgGA;AAEA;EACAA,oBADA;EAEAC,IAFA,kBAEA;IACA;IACA;MACAC,uBADA;MACA;MACAC,uBAFA;MAEA;MACAC,WAHA;MAGA;MACAC,WAJA;MAKAC,aALA,CAKA;;IALA;EAOA,CAXA;EAYAC;IACA;IACAC,WAFA,yBAEA;MACA;MACA,kDAFA,CAGA;;MACA;MACA;MACA;IACA,CATA;IAUA;IACAC,MAXA,oBAWA;MAAA;;MACA,kBADA,CAGA;;MACAC;QACA;QACA;MACA,CAHA,EAIA;MAJA,CAKAC,IALA,CAKA;QACA;QACA,sCAFA,CAGA;QACA;;QACA;MACA,CAXA,EAYA;MAZA,CAaAA,IAbA,CAaA;QACA;MACA,CAfA,EAgBA;MACA;MAjBA,CAkBAC,KAlBA,CAkBA;QACA;QACA;QACA;MACA,CAtBA;IAuBA;EAtCA,CAZA;EAoDA;EACAC,OArDA,qBAqDA;IAAA;;IACA;IACAH,yBACA;IADA,CAEAC,IAFA,CAEA;MACA;MACA;IACA,CALA;EAMA;AA7DA","names":["name","data","currentImage","previewImage","progress","message","imageInfo","methods","selectImage","upload","UploadService","then","catch","mounted"],"sourceRoot":"src/components","sources":["UploadImage.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-3\">\r\n    <!-- TODO: 수정 필요 -->\r\n    <!-- row 시작 -->\r\n    <div class=\"row justify-content-md-center\">\r\n      <div class=\"col-8\">\r\n        <label class=\"btn btn-default p-0\">\r\n          <!-- 파일 선택상자 -->\r\n          <input\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            ref=\"file\"\r\n            @change=\"selectImage\"\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div class=\"col-4\">\r\n        <!-- 서버에 insert 문 호출 -->\r\n        <button\r\n          class=\"btn btn-success btn-sm float-right\"\r\n          :disabled=\"!currentImage\"\r\n          @click=\"upload\"\r\n        >\r\n          Upload\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <!-- row 끝 -->\r\n\r\n    <!-- 프로그래스 바 시작-->\r\n    <div v-if=\"currentImage\" class=\"progress\">\r\n      <div\r\n        class=\"progress-bar progress-bar-info\"\r\n        role=\"progressbar\"\r\n        :style=\"{ width: progress + '%' }\"\r\n        :aria-valuenow=\"progress\"\r\n        aria-valuemin=\"0\"\r\n        aria-valuemax=\"100\"\r\n      >\r\n        {{ progress }}%\r\n      </div>\r\n    </div>\r\n    <!-- 프로그래스 바 끝-->\r\n\r\n    <!-- 미리보기 이미지 시작-->\r\n    <div v-if=\"previewImage\">\r\n      <div>\r\n        <img class=\"preview my-3\" :src=\"previewImage\" alt=\"\" />\r\n      </div>\r\n    </div>\r\n    <!--  미리보기 이미지 끝 -->\r\n\r\n    <!-- 서버 에러 메세지가 있을경우 아래 출력 -->\r\n    <div v-if=\"message\" class=\"alert alert-secondary\" role=\"alert\">\r\n      {{ message }}\r\n    </div>\r\n\r\n    <!-- 쇼핑 카트 형태 디자인 -->\r\n    <!-- v-for 시작 -->\r\n    <div class=\"card mt-3\" \r\n        v-for=\"(image, index) in imageInfo\" \r\n        :key=\"index\"\r\n    >\r\n    <div class=\"card-header\">이미지 번호 : {{ image.id }}</div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-5 col-md-offset-0\">\r\n          <figure>\r\n            <img class=\"img-thumbnail\" :src=\"image.url\" />\r\n          </figure>\r\n        </div>\r\n        <div class=\"col-md-6 col-md-offset-0 description\">\r\n          <p v-html=\"image.name\"></p>\r\n          <p class=\"price\">{{ image.url }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- v-for 종료 -->\r\n\r\n    <!-- list(목록) 이미지 정보를 출력 -->\r\n    <!-- <div class=\"card mt-3\">\r\n      <div class=\"card-header\">List of Image</div>\r\n      <ul class=\"list-group list-group-flush\">\r\n        <li\r\n          class=\"list-group-item\"\r\n          v-for=\"(image, index) in imageInfo\"\r\n          :key=\"index\"\r\n        >\r\n          <a :href=\"image.url\">{{ image.name }}</a>\r\n        </li>\r\n      </ul>\r\n    </div> -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UploadService from \"../services/UploadFilesService\";\r\n\r\nexport default {\r\n  name: \"upload-image\",\r\n  data() {\r\n    // 변수 초기화\r\n    return {\r\n      currentImage: undefined, // 현재이미지\r\n      previewImage: undefined, // 미리보기 이미지\r\n      progress: 0, // 프로그래스바를 위한 변수\r\n      message: \"\",\r\n      imageInfo: [], // 이미지 정보 객체배열\r\n    };\r\n  },\r\n  methods: {\r\n    // 이미지를 선택하면 변수에 저장하는 메소드\r\n    selectImage() {\r\n      // 파일선택상자에서 첫번째로 선택한 이미지가 저장됨\r\n      this.currentImage = this.$refs.file.files.item(0);\r\n      // 아래는 미리보기 이미지를 위한 주소가 저장됨\r\n      this.previewImage = URL.createObjectURL(this.currentImage);\r\n      this.progress = 0;\r\n      this.message = \"\";\r\n    },\r\n    // 파일 업로드를 위한 메소드\r\n    upload() {\r\n      this.progress = 0;\r\n\r\n      // 서버에 이미지 업로드 요청(insert 문 실행)\r\n      UploadService.upload(this.currentImage, (event) => {\r\n        // 파일이 업로드될때 진척상황이 저장됨(%)\r\n        this.progress = Math.round((100 * event.loaded) / event.total);\r\n      })\r\n        // 성공하면 then 으로 들어옴(서버에서 응답한 객체)\r\n        .then((response) => {\r\n          // 서버쪽 응답 메시지 저장\r\n          this.message = response.data.message;\r\n          // 서버쪽에 insert가 잘되었는지\r\n          // select문 호출\r\n          return UploadService.getFiles();\r\n        })\r\n        // 성공하면 then으로 들어옴(서버쪽 객체 받음)\r\n        .then((image) => {\r\n          this.imageInfo = image.data;\r\n        })\r\n        // 실패하면 catch으로 들어옴\r\n        // 화면에 실패메세지 출력\r\n        .catch((err) => {\r\n          this.progress = 0;\r\n          this.message = \"Could not upload the image!\" + err;\r\n          this.currentImage = undefined;\r\n        });\r\n    },\r\n  },\r\n  // 화면이 뜨자마자 실행되는 이벤트\r\n  mounted() {\r\n    // springboot 서버에 이미지파일 요청\r\n    UploadService.getFiles()\r\n      // 성공하면 then에 들어옴(객체, 응답메세지)\r\n      .then((response) => {\r\n        // response.data : 서버쪽에서 전송된 객체\r\n        this.imageInfo = response.data;\r\n      });\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.preview {\r\n  max-width: 200px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}