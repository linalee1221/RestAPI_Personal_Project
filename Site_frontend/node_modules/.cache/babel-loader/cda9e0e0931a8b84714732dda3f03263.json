{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport AuthService from \"@/services/auth/AuthService\"; // 로컬저장소(크롬의 localstorage)에서 user의 정보를 받기\n\nvar user = JSON.parse(localStorage.getItem(\"user\")); // user 상태 정보 설정 : initialState\n// 1) 로그인(loggedIn) 이 되어 있을때 상태 정보 : loggedIn=true\n// 2) 로그인(loggedIn) 이 되지 않을때 상태 정보 : loggedIn=false\n// 3항연산자 : (조건==true) ? 1번실행 : 2번실행\n\nvar initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user: user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\nexport var auth = {\n  namespaced: true,\n  // 공유 데이터 정의(전역 변수)\n  state: initialState,\n  // setter 메소드들 정의( 변수에 저장하는 메소드 )\n  mutations: {\n    // 로그인 성공 메소드( 상태정보 갱신 : true )\n    loginSuccess: function loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    //    로그인 실패 메소드( 상태정보 갱신 : false )\n    loginFailure: function loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    //    로그아웃 메소드( 상태정보 갱신 : false )\n    logout: function logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    //    회원가입 성공 메소드 ( 상태정보 갱신 : false )\n    registerSuccess: function registerSuccess(state) {\n      state.status.loggedIn = false; // Todo: 아래 막기\n      // state.user = null;\n    },\n    //    회원가입 실패 메소드( 상태정보 갱신 : false )\n    registerFailure: function registerFailure(state) {\n      state.status.loggedIn = false; // Todo: 아래 막기\n      // state.user = null;\n    }\n  },\n  // 비동기 함수들 정의\n  // axios 통신( 성격 : 서버에서 결과를 언제 보낼 줄 지 모름 )\n  actions: {\n    // axios 통신 : login ( AuthService.login 호출 )\n    // springboot 로 login 관련 요청( username, password )\n    login: function login(_ref, user) {\n      var commit = _ref.commit;\n      return AuthService.login(user).then(function (user) {\n        // commit( mutations 메소드명 )\n        // loginSuccess(state, user) 메소드 호출\n        // loggedIn 속성: true, user 속성: user\n        commit(\"loginSuccess\", user); // 비동기 함수 성공시 : Promise.resolve\n\n        return Promise.resolve(user);\n      }, function (error) {\n        // loginFailure(state) 메소드 호출\n        commit(\"loginFailure\"); // 비동기 함수 실패시 : Promise.reject\n\n        return Promise.reject(error);\n      });\n    },\n    //    logout : AuthService.logout 호출\n    logout: function logout(_ref2) {\n      var commit = _ref2.commit;\n      // 로컬저장소에서 user 삭제(제거)\n      AuthService.logout(); //    상태정보 갱신 : loggedIn = false\n      //    mutations : logout(state) 메소드 호출\n\n      commit(\"logout\");\n    },\n    //    register(회원가입) AuthService.register\n    register: function register(_ref3, user) {\n      var commit = _ref3.commit;\n      // Todo: return 누락\n      // axios(post) 서버쪽으로 user객체를 전송해서 insert 요청을 함\n      return AuthService.register(user).then(function (response) {\n        // mutations : registerSuccess(state) 메소드 호출\n        commit(\"registerSuccess\"); // 비동기 함수 성공시 : Promise.resolve 호출됨\n\n        console.log(response.data);\n        return Promise.resolve(response.data);\n      }, function (error) {\n        // mutations : registerFailure(state) 메소드 호출\n        commit(\"registerFailure\"); // 비동기 함수 실패시 : Promise.reject 호출됨\n\n        return Promise.reject(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["AuthService","user","JSON","parse","localStorage","getItem","initialState","status","loggedIn","auth","namespaced","state","mutations","loginSuccess","loginFailure","logout","registerSuccess","registerFailure","actions","login","commit","then","Promise","resolve","error","reject","register","response","console","log","data"],"sources":["E:/API_Projects/Personal_Project_0622-20220715T033918Z-001/Personal_Project_0622/front-end/src/store/AuthModule.js"],"sourcesContent":["import AuthService from \"@/services/auth/AuthService\";\r\n\r\n// 로컬저장소(크롬의 localstorage)에서 user의 정보를 받기\r\nconst user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n// user 상태 정보 설정 : initialState\r\n// 1) 로그인(loggedIn) 이 되어 있을때 상태 정보 : loggedIn=true\r\n// 2) 로그인(loggedIn) 이 되지 않을때 상태 정보 : loggedIn=false\r\n// 3항연산자 : (조건==true) ? 1번실행 : 2번실행\r\nconst initialState = user\r\n  ? { status: { loggedIn: true }, user }\r\n  : { status: { loggedIn: false }, user: null };\r\n\r\nexport const auth = {\r\n  namespaced: true,\r\n  // 공유 데이터 정의(전역 변수)\r\n  state: initialState,\r\n  // setter 메소드들 정의( 변수에 저장하는 메소드 )\r\n  mutations: {\r\n    // 로그인 성공 메소드( 상태정보 갱신 : true )\r\n    loginSuccess(state, user) {\r\n      state.status.loggedIn = true;\r\n      state.user = user;\r\n    },\r\n    //    로그인 실패 메소드( 상태정보 갱신 : false )\r\n    loginFailure(state) {\r\n      state.status.loggedIn = false;\r\n      state.user = null;\r\n    },\r\n    //    로그아웃 메소드( 상태정보 갱신 : false )\r\n    logout(state) {\r\n      state.status.loggedIn = false;\r\n      state.user = null;\r\n    },\r\n    //    회원가입 성공 메소드 ( 상태정보 갱신 : false )\r\n    registerSuccess(state) {\r\n      state.status.loggedIn = false;\r\n      // Todo: 아래 막기\r\n      // state.user = null;\r\n    },\r\n    //    회원가입 실패 메소드( 상태정보 갱신 : false )\r\n    registerFailure(state) {\r\n      state.status.loggedIn = false;\r\n      // Todo: 아래 막기\r\n      // state.user = null;\r\n    },\r\n  },\r\n  // 비동기 함수들 정의\r\n  // axios 통신( 성격 : 서버에서 결과를 언제 보낼 줄 지 모름 )\r\n  actions: {\r\n    // axios 통신 : login ( AuthService.login 호출 )\r\n    // springboot 로 login 관련 요청( username, password )\r\n    login({ commit }, user) {\r\n      return AuthService.login(user).then(\r\n        (user) => {\r\n          // commit( mutations 메소드명 )\r\n          // loginSuccess(state, user) 메소드 호출\r\n          // loggedIn 속성: true, user 속성: user\r\n          commit(\"loginSuccess\", user);\r\n          // 비동기 함수 성공시 : Promise.resolve\r\n          return Promise.resolve(user);\r\n        },\r\n        (error) => {\r\n          // loginFailure(state) 메소드 호출\r\n          commit(\"loginFailure\");\r\n          // 비동기 함수 실패시 : Promise.reject\r\n          return Promise.reject(error);\r\n        }\r\n      );\r\n    },\r\n    //    logout : AuthService.logout 호출\r\n    logout({ commit }) {\r\n      // 로컬저장소에서 user 삭제(제거)\r\n      AuthService.logout();\r\n      //    상태정보 갱신 : loggedIn = false\r\n      //    mutations : logout(state) 메소드 호출\r\n      commit(\"logout\");\r\n    },\r\n    //    register(회원가입) AuthService.register\r\n    register({ commit }, user) {\r\n      // Todo: return 누락\r\n      // axios(post) 서버쪽으로 user객체를 전송해서 insert 요청을 함\r\n      return AuthService.register(user).then(\r\n        (response) => {\r\n          // mutations : registerSuccess(state) 메소드 호출\r\n          commit(\"registerSuccess\");\r\n          // 비동기 함수 성공시 : Promise.resolve 호출됨\r\n          console.log(response.data);\r\n          return Promise.resolve(response.data);\r\n        },\r\n        (error) => {\r\n          // mutations : registerFailure(state) 메소드 호출\r\n          commit(\"registerFailure\");\r\n          // 비동기 함수 실패시 : Promise.reject 호출됨\r\n          return Promise.reject(error);\r\n        }\r\n      );\r\n    },\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}