{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport User from \"@/models/user\";\n/* eslint-disable  */\n\nexport default {\n  name: \"Register\",\n  // 변수 초기화\n  data: function data() {\n    return {\n      user: new User(\"\", \"\", \"\"),\n      // 유저 객체\n      submitted: false,\n      successful: false,\n      message: \"\" // 에러 메세지 저장용\n\n    };\n  },\n  computed: {\n    loggedIn: function loggedIn() {\n      // 공유저장소의 user객체에 속성인 loggedIn 값을 가져옴\n      return this.$store.state.auth.status.loggedIn;\n    }\n  },\n  // 화면이 뜨자마자 실행되는 이벤트\n  mounted: function mounted() {\n    //  로그인 되어 있는 유저이면 /profile로 강제 페이지 이동시킴\n    if (this.loggedIn) {\n      this.$router.push(\"/profile\");\n    }\n  },\n  methods: {\n    // 회원 가입 메소드\n    handleRegister: function handleRegister() {\n      var _this = this;\n\n      this.message = \"\";\n      this.submitted = true; // 회원가입 버튼클릭시\n      //  유효성 체크 로직 실행( Vee-Validate 이용 )\n      //  $validator.validate() 입력양식 유효성 체크가 통과하면\n      //  isValid = true\n\n      this.$validator.validate().then(function (isValid) {\n        // isValid = true 일때만 아래가 실행됨\n        if (isValid) {\n          //  springboot 서버 통신 : 공유저장소의 비동기메소드 호출(register)\n          _this.$store.dispatch(\"auth/register\", _this.user) //  성공 / 실패 then\n          //      성공하면 첫번째 매개변수 실행\n          //      실패하면 두번째 매개변수 실행\n          .then( //  성공\n          function (data) {\n            // response == data ( 서버쪽 응답 메세지(객체) )\n            _this.message = data.message;\n            _this.successful = true; //  강제 페이지 전환 : login\n            //   this.$router.push(\"/login\");\n          }, // 실패\n          function (error) {\n            _this.message = error.message || error.toString();\n            _this.successful = false;\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AAEA;;AACA;EACAA,gBADA;EAEA;EACAC,IAHA,kBAGA;IACA;MACAC,0BADA;MACA;MACAC,gBAFA;MAGAC,iBAHA;MAIAC,WAJA,CAIA;;IAJA;EAMA,CAVA;EAWAC;IACAC,QADA,sBACA;MACA;MACA;IACA;EAJA,CAXA;EAiBA;EACAC,OAlBA,qBAkBA;IACA;IACA;MACA;IACA;EACA,CAvBA;EAwBAC;IACA;IACAC,cAFA,4BAEA;MAAA;;MACA;MACA,sBAFA,CAEA;MACA;MACA;MACA;;MACA,2BACAC,IADA,CACA;QACA;QACA;UACA;UACA,mDACA;UACA;UACA;UAHA,CAIAA,IAJA,EAKA;UACA;YACA;YACA;YACA,wBAHA,CAIA;YACA;UACA,CAZA,EAaA;UACA;YACA,gBACAC,iBACAA,gBAFA;YAGA;UACA,CAnBA;QAqBA;MACA,CA3BA;IA4BA;EApCA;AAxBA","names":["name","data","user","submitted","successful","message","computed","loggedIn","mounted","methods","handleRegister","then","error"],"sourceRoot":"src/views","sources":["Register.vue"],"sourcesContent":["<template>\r\n  <!--  부트스트랩 화면배치 : col 12등분 -->\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card card-container\">\r\n      <img id=\"profile-img\" src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\" class=\"profile-img-card\" />\r\n      <form name=\"form\" @submit.prevent=\"handleRegister\">\r\n        <!--    successful: false 이면 회원가입버튼을 클릭 안한 상태  -->\r\n        <!--    successful: false 이면 회원가입 중 에러발생 상태  -->\r\n        <!--     successful div 시작   -->\r\n        <div v-if=\"!successful\">\r\n          <!--          유저명 입력양식 -->\r\n          <div class=\"form-group\">\r\n            <label for=\"username\">Username</label>\r\n            <input v-model=\"user.username\" v-validate=\"'required|min:3|max:20'\" type=\"text\" class=\"form-control\"\r\n              name=\"username\">\r\n            <!--  submit 버튼을 누르고 && 유효성에러가 발생했을 경우 아래 내용이 보임  -->\r\n            <div v-if=\"errors.has('username') && submitted\" class=\"alert-danger\">\r\n              {{ errors.first(\"username\") }}\r\n            </div>\r\n          </div>\r\n\r\n          <!--          이메일 입력양식 -->\r\n          <div class=\"form-group\">\r\n            <label for=\"email\">Email</label>\r\n            <input v-model=\"user.email\" v-validate=\"'required|max:50'\" type=\"text\" class=\"form-control\" name=\"email\">\r\n            <!--  submit 버튼을 누르고 && 유효성에러가 발생했을 경우 아래 내용이 보임  -->\r\n            <div v-if=\"errors.has('email') && submitted\" class=\"alert-danger\">\r\n              {{ errors.first(\"email\") }}\r\n            </div>\r\n          </div>\r\n\r\n          <!--          패스워드 입력양식 -->\r\n          <div class=\"form-group\">\r\n            <label for=\"password\">Password</label>\r\n            <input v-model=\"user.password\" v-validate=\"'required|min:6|max:40'\" type=\"password\" class=\"form-control\"\r\n              name=\"password\">\r\n            <!--  submit 버튼을 누르고 && 유효성에러가 발생했을 경우 아래 내용이 보임  -->\r\n            <div v-if=\"errors.has('password') && submitted\" class=\"alert-danger\">\r\n              {{ errors.first(\"password\") }}\r\n            </div>\r\n          </div>\r\n\r\n          <!--  submit 버튼 시작 -->\r\n          <div class=\"form-group\">\r\n            <button class=\"btn btn-primary btn-block\">\r\n              Sign Up\r\n            </button>\r\n          </div>\r\n          <!-- submit 버튼 끝 -->\r\n\r\n        </div>\r\n        <!--     successful div 끝   -->\r\n\r\n      </form>\r\n      <!--      화면에 에러메세지 출력 -->\r\n      <div v-if=\"message\" class=\"alert\" :class=\"successful ? 'alert-success' : 'alert-danger'\">\r\n        {{ message }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport User from \"@/models/user\";\r\n\r\n/* eslint-disable  */\r\nexport default {\r\n  name: \"Register\",\r\n  // 변수 초기화\r\n  data() {\r\n    return {\r\n      user: new User(\"\", \"\", \"\"), // 유저 객체\r\n      submitted: false,\r\n      successful: false,\r\n      message: \"\" // 에러 메세지 저장용\r\n    }\r\n  },\r\n  computed: {\r\n    loggedIn() {\r\n      // 공유저장소의 user객체에 속성인 loggedIn 값을 가져옴\r\n      return this.$store.state.auth.status.loggedIn;\r\n    }\r\n  },\r\n  // 화면이 뜨자마자 실행되는 이벤트\r\n  mounted() {\r\n    //  로그인 되어 있는 유저이면 /profile로 강제 페이지 이동시킴\r\n    if (this.loggedIn) {\r\n      this.$router.push(\"/profile\");\r\n    }\r\n  },\r\n  methods: {\r\n    // 회원 가입 메소드\r\n    handleRegister() {\r\n      this.message = \"\";\r\n      this.submitted = true; // 회원가입 버튼클릭시\r\n      //  유효성 체크 로직 실행( Vee-Validate 이용 )\r\n      //  $validator.validate() 입력양식 유효성 체크가 통과하면\r\n      //  isValid = true\r\n      this.$validator.validate()\r\n        .then(isValid => {\r\n          // isValid = true 일때만 아래가 실행됨\r\n          if (isValid) {\r\n            //  springboot 서버 통신 : 공유저장소의 비동기메소드 호출(register)\r\n            this.$store.dispatch(\"auth/register\", this.user)\r\n              //  성공 / 실패 then\r\n              //      성공하면 첫번째 매개변수 실행\r\n              //      실패하면 두번째 매개변수 실행\r\n              .then(\r\n                //  성공\r\n                data => {\r\n                  // response == data ( 서버쪽 응답 메세지(객체) )\r\n                  this.message = data.message;\r\n                  this.successful = true;\r\n                  //  강제 페이지 전환 : login\r\n                  //   this.$router.push(\"/login\");\r\n                },\r\n                // 실패\r\n                error => {\r\n                  this.message =\r\n                    error.message ||\r\n                    error.toString();\r\n                  this.successful = false;\r\n                }\r\n              )\r\n          }\r\n        })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nlabel {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.card-container.card {\r\n  max-width: 350px !important;\r\n  padding: 40px 40px;\r\n}\r\n\r\n.card {\r\n  background-color: #f7f7f7;\r\n  padding: 20px 25px 30px;\r\n  margin: 0 auto 25px;\r\n  margin-top: 50px;\r\n  -moz-border-radius: 2px;\r\n  -webkit-border-radius: 2px;\r\n  border-radius: 2px;\r\n  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.profile-img-card {\r\n  width: 96px;\r\n  height: 96px;\r\n  margin: 0 auto 10px;\r\n  display: block;\r\n  -moz-border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  border-radius: 50%;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}