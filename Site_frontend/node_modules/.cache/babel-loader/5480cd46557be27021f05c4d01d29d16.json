{"ast":null,"code":"import _classCallCheck from \"E:/API_Projects/Personal_Project_0622-20220715T033918Z-001/Personal_Project_0622/front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/API_Projects/Personal_Project_0622-20220715T033918Z-001/Personal_Project_0622/front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n// AuthService.js\n// login / logout / register(회원가입) 처리\nimport http from \"../../http-auth\";\n\nvar AuthService = /*#__PURE__*/function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n  }\n\n  _createClass(AuthService, [{\n    key: \"login\",\n    value: //    로그인 메소드(함수)\n    function login(user) {\n      // springboot 서버로 로그인 정보(이름, 암호) 확인 요청\n      return http.post(\"/signin\", {\n        username: user.username,\n        password: user.password\n      }) //    성공하면 then 으로 결과가 들어옴\n      .then(function (response) {\n        console.log(response.data);\n        console.log(\"accessToken : \" + response.data.token); // springboot 서버에서 전송한 웹토큰을 받았으면\n        // 로컬스토리지에 user 라는 이름으로 저장\n\n        if (response.data.token) {\n          // JSON.stringify : json객체 -> 문자열로 변환\n          // JSON.parse : 문자열 -> json객체로 변환\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\n        }\n\n        return response.data;\n      });\n    } //     logout\n    //    JWT(Java Web Token)를 로컬 저장소(localstorage)에서 제거\n\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      localStorage.removeItem(\"user\");\n    } //    POST 방식 : springBoot 서버에 회원 가입 을 요청( insert )\n    //    영문사이트 : sign up ( 회원 가입 ), sign in ( 로그인 )\n\n  }, {\n    key: \"register\",\n    value: function register(user) {\n      return http.post(\"/signup\", {\n        username: user.username,\n        email: user.email,\n        password: user.password\n      });\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport default new AuthService();","map":{"version":3,"names":["http","AuthService","user","post","username","password","then","response","console","log","data","token","localStorage","setItem","JSON","stringify","removeItem","email"],"sources":["E:/API_Projects/Personal_Project_0622-20220715T033918Z-001/Personal_Project_0622/front-end/src/services/auth/AuthService.js"],"sourcesContent":["// AuthService.js\r\n// login / logout / register(회원가입) 처리\r\nimport http from \"../../http-auth\"\r\n\r\nclass AuthService {\r\n//    로그인 메소드(함수)\r\n    login(user) {\r\n        // springboot 서버로 로그인 정보(이름, 암호) 확인 요청\r\n        return http.post(\"/signin\", {\r\n                username: user.username,\r\n                password: user.password\r\n            }\r\n        )\r\n    //    성공하면 then 으로 결과가 들어옴\r\n            .then( response => {\r\n                console.log(response.data);\r\n                console.log(\"accessToken : \" + response.data.token);\r\n\r\n                // springboot 서버에서 전송한 웹토큰을 받았으면\r\n                // 로컬스토리지에 user 라는 이름으로 저장\r\n                if(response.data.token) {\r\n                    // JSON.stringify : json객체 -> 문자열로 변환\r\n                    // JSON.parse : 문자열 -> json객체로 변환\r\n                    localStorage.setItem(\"user\", JSON.stringify(response.data))\r\n                }\r\n\r\n                return response.data;\r\n            })\r\n    }\r\n\r\n//     logout\r\n//    JWT(Java Web Token)를 로컬 저장소(localstorage)에서 제거\r\n    logout() {\r\n        localStorage.removeItem(\"user\");\r\n    }\r\n\r\n//    POST 방식 : springBoot 서버에 회원 가입 을 요청( insert )\r\n//    영문사이트 : sign up ( 회원 가입 ), sign in ( 로그인 )\r\n    register(user) {\r\n        return http.post(\"/signup\", {\r\n            username: user.username,\r\n            email: user.email,\r\n            password: user.password\r\n        })\r\n    }\r\n}\r\n\r\nexport default new AuthService();\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;;AAAA;AACA;AACA,OAAOA,IAAP,MAAiB,iBAAjB;;IAEMC,W;;;;;;;WACN;IACI,eAAMC,IAAN,EAAY;MACR;MACA,OAAOF,IAAI,CAACG,IAAL,CAAU,SAAV,EAAqB;QACpBC,QAAQ,EAAEF,IAAI,CAACE,QADK;QAEpBC,QAAQ,EAAEH,IAAI,CAACG;MAFK,CAArB,EAKX;MALW,CAMFC,IANE,CAMI,UAAAC,QAAQ,EAAI;QACfC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;QACAF,OAAO,CAACC,GAAR,CAAY,mBAAmBF,QAAQ,CAACG,IAAT,CAAcC,KAA7C,EAFe,CAIf;QACA;;QACA,IAAGJ,QAAQ,CAACG,IAAT,CAAcC,KAAjB,EAAwB;UACpB;UACA;UACAC,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeR,QAAQ,CAACG,IAAxB,CAA7B;QACH;;QAED,OAAOH,QAAQ,CAACG,IAAhB;MACH,CAnBE,CAAP;IAoBH,C,CAEL;IACA;;;;WACI,kBAAS;MACLE,YAAY,CAACI,UAAb,CAAwB,MAAxB;IACH,C,CAEL;IACA;;;;WACI,kBAASd,IAAT,EAAe;MACX,OAAOF,IAAI,CAACG,IAAL,CAAU,SAAV,EAAqB;QACxBC,QAAQ,EAAEF,IAAI,CAACE,QADS;QAExBa,KAAK,EAAEf,IAAI,CAACe,KAFY;QAGxBZ,QAAQ,EAAEH,IAAI,CAACG;MAHS,CAArB,CAAP;IAKH;;;;;;AAGL,eAAe,IAAIJ,WAAJ,EAAf"},"metadata":{},"sourceType":"module"}